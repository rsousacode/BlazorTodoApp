@using BlazorTodoApp.Data
@inject TodoListService ListService

<div class="navbar-nav align-items-center m-3">
  <div class="col">
    <button type="button"
            class=" btn btn-primary px-sm-4 m-1 align-content-center" @onclick="OnAddEntryClicked">
      Add item
    </button>
  </div>
</div>
<div id="accordion">
  @foreach (var todoEntry in RenderData.Values)
  {
    <TodoEntry
      Title=@todoEntry.Data.Title
      Content=@todoEntry.Data.Content
      Collapsed=@todoEntry.IsCollapsed
      OnEntryClicked="async () => await OnEntryClicked(todoEntry)"
      EditMode=@todoEntry.IsEditMode
      OnEditClicked="async () => await OnEntryEditClicked(todoEntry)"
      OnSaveClicked="async (entryEditData) => await OnEntrySaveClicked(todoEntry.Data.Id, entryEditData)"
      CreateMode="@todoEntry.IsCreateMode"
      OnRemoveClicked="async () => await OnRemoveEntryClicked(todoEntry.Data.Id)"
    />
  }
</div>

@code
{
  Dictionary<int, EntryRenderData> RenderData { get; set; } = new();

  protected override void OnInitialized()
  {
  // Initialize our rendering data
    foreach (var entryData in ListService.GetEntries())
    {
      RenderData.Add(entryData.Id, new EntryRenderData(entryData));
    }
  }
  async Task OnEntryClicked(EntryRenderData entryData)
  {
    var collapsed = RenderData[entryData.Data.Id].IsCollapsed;
    RenderData[entryData.Data.Id].IsCollapsed = !collapsed;
  }
  
  async Task OnEntryEditClicked(EntryRenderData entryData)
  {
  // Toggle editMode
    var editMode = RenderData[entryData.Data.Id].IsEditMode;
    RenderData[entryData.Data.Id].IsEditMode = !editMode;
        
    // Toggle collapse state
    RenderData[entryData.Data.Id].IsCollapsed = false;
  }
  async Task OnAddEntryClicked()
  {
  // Add a new entry to the render data and assign a id
    var id = ListService.TodoEntries.Count;
    
    var temporaryEntryData = new EntryData()
    {
      Id = id,
      Title = "",
      Content = ""
    };
    
    RenderData[id] = new EntryRenderData(temporaryEntryData)
    {
      // Set this item to edit mode (to show forms) 
      IsEditMode = true,
      // Set item to Create mode
      IsCreateMode = true,
      IsCollapsed = false,
    };
  }
  async Task OnEntrySaveClicked(int id, EntryDataDto dataDto)
  {
    // Check if exists
    var item = ListService.GetEntryById(id);

    if (item != null)
    {
      // Update data in the "database"
      ListService.UpdateEntry(id, dataDto);
    }
    else // Entry is being created
    {
      var newEntry = ListService.AddEntry(dataDto);
      RenderData[newEntry.Id] = new EntryRenderData(newEntry);
      
      // Let the entry expanded
      RenderData[newEntry.Id].IsCollapsed = false;
    }

    // Set edit mode to false
    RenderData[id].IsEditMode = false;
  }
  
  async Task OnRemoveEntryClicked(int id)
  {
  // Add a new entry to the render data and assign a id
    ListService.DeleteEntry(id);

  // Delete from the rendering data
    RenderData.Remove(id);
  }
}